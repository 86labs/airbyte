plugins {
    id 'java'
    id 'application'
}

application {
    applicationName = "airbyte-tests"
    mainClass = 'io.airbyte.test.airbyte_test_container.CreateKubePodProcess'
    applicationDefaultJvmArgs = ['-XX:MaxRAMPercentage=75.0']
}

// The java plugin automatically compiles/runs tests in the test source set (./src/test directory). Since we want acceptance tests to run
// only when explicitly requested, we put them in a separate source set, specify the sourceset's dependencies via configuration extensions below,
// and create a custom test task that can be invoked to run acceptance tests.
sourceSets {
    acceptanceTests {
        java {
            srcDir("src/acceptanceTests/java")
        }
        resources {
            srcDir("src/acceptanceTests/resources")
        }
    }
    automaticMigrationAcceptanceTest {
        java {
            srcDir("src/automaticMigrationAcceptanceTest/java")
        }
        resources {
            srcDir("src/automaticMigrationAcceptanceTest/resources")
        }
    }
}

// Gradle links configurations with the name xImplementation or xRuntimeOnly etc.. to the source set named x. Therefore, any deps specified
// using the extensions below apply only to this sourceset and not any other code in the project.
configurations {
    acceptanceTestsImplementation.extendsFrom testImplementation
    acceptanceTestsRuntimeOnly.extendsFrom testRuntimeOnly

    automaticMigrationAcceptanceTestImplementation.extendsFrom testImplementation
    automaticMigrationAcceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation project(':airbyte-api')
    implementation project(':airbyte-workers')
    implementation project(':airbyte-config:models')

    implementation 'joda-time:joda-time:2.10.13'
    implementation 'org.testcontainers:testcontainers:1.15.3'
    implementation 'io.fabric8:kubernetes-client:5.9.0'


    acceptanceTestsImplementation project(':airbyte-api')
    acceptanceTestsImplementation project(':airbyte-commons')
    acceptanceTestsImplementation project(':airbyte-config:persistence')
    acceptanceTestsImplementation project(':airbyte-db:lib')
    acceptanceTestsImplementation project(':airbyte-tests')
    acceptanceTestsImplementation project(':airbyte-test-utils')

    acceptanceTestsImplementation 'com.fasterxml.jackson.core:jackson-databind'
    acceptanceTestsImplementation 'io.github.cdimascio:java-dotenv:3.0.0'
    acceptanceTestsImplementation 'org.apache.commons:commons-csv:1.4'
    acceptanceTestsImplementation 'org.testcontainers:postgresql:1.15.3'
    acceptanceTestsImplementation 'org.postgresql:postgresql:42.2.18'

    automaticMigrationAcceptanceTestImplementation project(':airbyte-api')
    automaticMigrationAcceptanceTestImplementation project(':airbyte-commons')
    automaticMigrationAcceptanceTestImplementation project(':airbyte-tests')

    automaticMigrationAcceptanceTestImplementation 'org.testcontainers:testcontainers:1.15.3'
}

// test should run using the current version of the docker compose configuration.
task copyComposeFileForAcceptanceTests(type: Copy) {
    from "${rootDir}/docker-compose.yaml"
    into "${sourceSets.acceptanceTests.output.resourcesDir}"
}
task copyComposeFileForMigrationAcceptanceTests(type: Copy) {
    from "${rootDir}/docker-compose.yaml"
    into "${sourceSets.automaticMigrationAcceptanceTest.output.resourcesDir}"
}

assemble.dependsOn(project.tasks.copyComposeFileForAcceptanceTests)
assemble.dependsOn(project.tasks.copyComposeFileForMigrationAcceptanceTests)

task acceptanceTests(type: Test) {
    testClassesDirs += sourceSets.acceptanceTests.output.classesDirs
    classpath += sourceSets.acceptanceTests.runtimeClasspath
    useJUnitPlatform()
    failFast = true
    testLogging() {
        events "passed", "failed"
        exceptionFormat "full"
    }
    mustRunAfter test
}

task automaticMigrationAcceptanceTest(type: Test) {
    testClassesDirs += sourceSets.automaticMigrationAcceptanceTest.output.classesDirs
    classpath += sourceSets.automaticMigrationAcceptanceTest.runtimeClasspath
    useJUnitPlatform()
    failFast = true
    testLogging() {
        events "passed", "failed"
        exceptionFormat "full"
    }
    mustRunAfter test
}

tasks.withType(Copy) {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-tests-*.tar'
    }
    into 'build/docker/bin'
}

Task dockerBuildTask = getDockerBuildTask("tests",  "$project.projectDir")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)
