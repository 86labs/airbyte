name: Platform Project Start Sprint

on:
  workflow_dispatch:
    inputs:
      sprint-to-start:
        description: 'Please choose the sprint number to start (ie "5" to start Sprint 5).'
        required: true
      auto-update:
        description: "Should a new milestone be automatically created for the new sprint, with unclosed issues automatically added to it?"
        required: true
        default: "yes"
jobs:
  start-new-sprint:
    name: "Start New Sprint"
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.PARKER_PAT_FOR_PLATFORM_PROJECT_AUTOMATION }}
          ORG: airbytehq
          PROJECT_NUMBER: 6 # https://github.com/orgs/airbytehq/projects/6
        id: get_project_data
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:100) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORG -F number=$PROJECT_NUMBER > project_data.json

          echo ::set-output name=PROJECT_ID::$(jq -r '.data.organization.projectNext.id' project_data.json)
          echo ::set-output name=MILESTONE_FIELD_ID::$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name== "Milestone") | .id' project_data.json)
          echo ::set-output name=SPRINT_FIELD_ID::$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name== "Sprint") | .id' project_data.json)
          echo ::set-output name=NEW_SPRINT_VALUE_ID::$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name== "Sprint") | .settings | fromjson.configuration.iterations[] | select(.title == "Sprint ${{github.event.inputs.sprint-to-start}}") |.id' project_data.json)

          NEW_SPRINT_START_DATE=$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name== "Sprint") | .settings | fromjson.configuration.iterations[] | select(.title == "Sprint ${{github.event.inputs.sprint-to-start}}") |.start_date' project_data.json)
          echo ::set-output name=NEW_SPRINT_START_DATE::$(echo $NEW_SPRINT_START_DATE)
          echo ::set-output name=MILESTONE_DUE_DATE::$(date -d "${NEW_SPRINT_START_DATE}+7 days" +"%y-%m-%d")
          echo ::set-output name=MILESTONE_DUE_TIMESTAMP::$(TZ=UTC date -d "${NEW_SPRINT_START_DATE}+7 days" +'%Y-%m-%dT%H:%M:%SZ')
      - name: Create new milestone
        if: github.event.inputs.auto-update == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.PARKER_PAT_FOR_PLATFORM_PROJECT_AUTOMATION }}
        id: create_new_milestone
        run: |
          echo '{
            "title": "Platform ${{steps.get_project_data.outputs.MILESTONE_DUE_DATE}}",
            "state": "open",
            "due_on": "${{steps.get_project_data.outputs.MILESTONE_DUE_TIMESTAMP}}"
          }' > milestone_post_input.json

          gh api --method POST repos/airbytehq/airbyte/milestones --input milestone_post_input.json > milestone_creation_output.json

          echo ::set-output name=NEW_MILESTONE_NODE_ID::$(jq -r '.node_id' milestone_creation_output.json)
      - name: Add issues to new sprint and milestone
        if: github.event.inputs.auto-update == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.PARKER_PAT_FOR_PLATFORM_PROJECT_AUTOMATION }}
        id: add_issues_to_new_sprint
        run: |
          LAST_MILESTONE_ISSUES=$(gh issue list --search 'milestone:"Platform ${{steps.get_project_data.outputs.NEW_SPRINT_START_DATE}}"' -s all -L 1000 --json id | jq -r 'map(.id)| @sh' | tr -d \')
          for
          gh api graphql -f query='
            query($project_id: ID!) {
              node(id: $project_id) {
                ... on ProjectNext {
                  items(first: 100) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }' -f project_id=$PLATFORM_SCRUM_PROJECT_ID
